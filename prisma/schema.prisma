// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  age      Int
  email    String @unique
  contact  String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  is_deleted Boolean   @default(false)

  property Property[]
  role     String     @default("BUYER")

  pivotRating pivotRating[]

  @@map("users")
}

model Property {
  id          Int     @id @default(autoincrement())
  floor       Int
  bedroom     Int
  kitchen     Int
  living_room Int
  bathroom    Int
  furnished   Boolean
  address     String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  is_deleted Boolean   @default(false)

  rule Rules[]

  post Post?

  User    User? @relation(fields: [user_id], references: [id])
  user_id Int

  pivotRating pivotRating[]

  @@map("properties")
}

model Post {
  id Int @id @default(autoincrement())

  title       String
  price       Float
  description String
  capacity    Int

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  is_deleted Boolean   @default(false)

  property    Property @relation(fields: [property_id], references: [id])
  property_id Int      @unique

  @@index([title])
  @@map("posts")
}

model Rating {
  id                   Int    @id @default(autoincrement())
  comment              String
  cleanliness_rating   Float
  accuracy_rating      Float
  check_in_rating      Float
  communication_rating Float
  location_rating      Float
  value_rating         Float

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  is_deleted Boolean   @default(false)

  pivotRating pivotRating?

  @@map("ratings")
}

model Rules {
  id   Int    @id @default(autoincrement())
  rule String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  is_deleted Boolean   @default(false)

  property    Property @relation(fields: [property_id], references: [id])
  property_id Int

  @@map("rules")
}

model pivotRating {
  id Int @id @default(autoincrement())

  rating    Rating @relation(fields: [rating_id], references: [id])
  rating_id Int    @unique

  property    Property @relation(fields: [property_id], references: [id])
  property_id Int

  user    User @relation(fields: [user_id], references: [id])
  user_id Int
}
